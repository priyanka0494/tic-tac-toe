{"version":3,"sources":["components/icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb691158.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { FaTimes, FaPen, FaRegCircle} from 'react-icons/fa'\r\n\r\nconst Icon = ({name}) => {\r\n    switch (name) {\r\n        case 'circle':\r\n            return <FaRegCircle className='icon'/>\r\n        case 'cross':\r\n            return <FaTimes className='icon'/>\r\n        default:\r\n            return <FaPen className='icon'/>\r\n    }\r\n}\r\n\r\nexport default Icon","import React, { useState } from 'react'\n\nimport Icon from './components/icon';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport {Card, CardBody, Container, Button, Col, Row} from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nconst itemArray = new Array(9).fill('empty')\n\nconst App = () => {\n\tconst [isCross, setIsCross] = useState(false)\n\tconst [winMessage, setWinMessage] = useState('')\n\n\tconst reloadGame = () => {\n\t\tsetIsCross(false);\n\t\tsetWinMessage('') ;\n\t\titemArray.fill('empty', 0, 9)\n\t}\n\n\tconst checkIsWinner = () => {\n\t\t// winning logic\n\t\tif(itemArray[0] === itemArray[1] && itemArray[0] === itemArray[2] && itemArray[0] !== 'empty') {\n\t\t\tsetWinMessage(`${itemArray[0]} wins`)\n\t\t} else if(itemArray[3] === itemArray[4] && itemArray[3] === itemArray[5] && itemArray[3] !== 'empty') {\n\t\t\tsetWinMessage(`${itemArray[3]} wins`)\n\t\t} else if(itemArray[6] === itemArray[7] && itemArray[6] === itemArray[8] && itemArray[6] !== 'empty') {\n\t\t\tsetWinMessage(`${itemArray[6]} wins`)\n\t\t} else if(itemArray[0] === itemArray[3] && itemArray[0] === itemArray[6] && itemArray[0] !== 'empty') {\n\t\t\tsetWinMessage(`${itemArray[0]} wins`)\n\t\t} else if(itemArray[1] === itemArray[4] && itemArray[1] === itemArray[7] && itemArray[1] !== 'empty') {\n\t\t\tsetWinMessage(`${itemArray[1]} wins`)\n\t\t} else if(itemArray[2] === itemArray[5] && itemArray[2] === itemArray[8] && itemArray[2] !== 'empty') {\n\t\t\tsetWinMessage(`${itemArray[2]} wins`)\n\t\t} else if(itemArray[0] === itemArray[4] && itemArray[0] === itemArray[8] && itemArray[0] !== 'empty') {\n\t\t\tsetWinMessage(`${itemArray[0]} wins`)\n\t\t} else if(itemArray[6] === itemArray[4] && itemArray[6] === itemArray[2] && itemArray[6] !== 'empty') {\n\t\t\tsetWinMessage(`${itemArray[6]} wins`)\n\t\t}\n\t}\n\n\tconst changeItem = itemNumber => {\n\t\tif(winMessage) {\n\t\t\treturn toast(winMessage, { type: 'success' })\n\t\t}\n\n\t\tif (itemArray[itemNumber] === 'empty') {\n\t\t\titemArray[itemNumber] = isCross ? 'cross': 'circle'\n\t\t\tsetIsCross(!isCross)\n\t\t} else {\n\t\t\treturn toast('Already Filled!!', { type: 'error'})\n\t\t}\n\n\t\tcheckIsWinner()\n\t}\n\n\treturn (\n\t\t<Container className='p-5'>\n\t\t\t<ToastContainer position='top-right' />\n\t\t\t<Row>\n\t\t\t\t<Col md={6} className='offset-md-3'></Col>\n\t\t\t\t{winMessage ? (\n\t\t\t\t\t<div className='mb-2 mt-2'>\n\t\t\t\t\t\t<h1 className='text-success text-uppercase text-center'>\n\t\t\t\t\t\t\t{winMessage}\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\tonClick={reloadGame}\n\t\t\t\t\t\t>Reload the Game</Button>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<h1 className='text-center text-warning'>\n\t\t\t\t\t\t{isCross ? \"Cross\" : \"Circle\"} Turns\n\t\t\t\t\t</h1>\n\t\t\t\t)}\n\t\t\t\t<div className='grid'>\n\t\t\t\t{\n\t\t\t\t\titemArray.map((item, index) => (\n\t\t\t\t\t\t<Card key={index} color='warning' onClick={() => changeItem(index)}>\n\t\t\t\t\t\t\t<CardBody className='box'>\n\t\t\t\t\t\t\t\t<Icon name={item} />\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}